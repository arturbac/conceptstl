include(CheckCXXCompilerFlag)

check_term_color() 
  
function(_report_flag_check_status _flag _varname)
  if (${_varname})
    set(check_cxx_flags_CXX_FLAGS ${check_cxx_flags_CXX_FLAGS} ${_flag})
    message(STATUS "${clr_green}success${clr_clear} [${clr_blue}${_flag}${clr_clear}]")
  else()
    message(STATUS "${clr_red}failed${clr_clear}  [${clr_blue}${_flag}${clr_clear}]")
  endif()
endfunction()
# helper method to ensure consistent cache var names
function(_varname_for_compile_flag_check_result _varname _flag )
  string(REGEX REPLACE "[-=]" "_" _varname ${_flag})
  string(TOUPPER ${_varname} _varname)
  set(_varname "AMRPC_HAVE${_varname}" PARENT_SCOPE)
endfunction()

function(check_cxx_flag _flag)
  set(CMAKE_REQUIRED_QUIET TRUE)
  _varname_for_compile_flag_check_result(_varname ${_flag})
  check_cxx_compiler_flag("${_flag}" "${_varname}")
  _report_flag_check_status("${_flag}" ${_varname})
  if (${${_varname}})
    set(CUSTOM_CXX_FLAGS ${CUSTOM_CXX_FLAGS} ${_flag} PARENT_SCOPE)
  endif()
endfunction()

function(check_cxx_flag_test _flag _test)
  set(CMAKE_REQUIRED_QUIET TRUE)
  check_cxx_compiler_flag("${_flag}" "${_test}")
  if (${_test})
    set(CUSTOM_CXX_FLAGS ${CUSTOM_CXX_FLAGS} ${_flag} PARENT_SCOPE)
  endif()
endfunction()

function(check_cxx_flags flags)
  set(check_cxx_flags_CXX_FLAGS "")
  foreach(flag ${flags})
    _varname_for_compile_flag_check_result(_varname ${flag})
    set(CMAKE_REQUIRED_QUIET TRUE)
    check_cxx_compiler_flag("${flag}" "${_varname}" )
    # message(STATUS "${flag} ${_varname}")
    _report_flag_check_status("${flag}" ${_varname})
    if (${${_varname}})
      set(check_cxx_flags_CXX_FLAGS ${check_cxx_flags_CXX_FLAGS} ${flag})
    endif()
  endforeach()
  set(check_cxx_flagssupported_cxx_flags ${check_cxx_flags_CXX_FLAGS} PARENT_SCOPE)
endfunction()
